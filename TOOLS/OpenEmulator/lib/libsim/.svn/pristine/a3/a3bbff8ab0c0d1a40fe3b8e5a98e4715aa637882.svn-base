#include "../include/sim.h"

FILE* recv_file = NULL;

u8* read_line;
u8* pkt_hex;


int data_pkt_receive_init(u8* txtpath)
{
     char tmp_buf[128] = { 0 };
    read_line = (u8*)malloc(BUF_LEN_5120 * sizeof(u8));
    pkt_hex = (u8*)malloc(BUF_LEN_2048 * sizeof(u8));

    if (access(txtpath, F_OK) == -1)
    {
        sprintf(tmp_buf, "touch %s", txtpath);
        system(tmp_buf);
    }
	else
	{
		sprintf(tmp_buf, "cat /dev/null > %s", txtpath);
        system(tmp_buf);
	}

    if (NULL == (recv_file = fopen(txtpath, "r")))
    {
        printf("open %s failed\n", txtpath);
        return -1;
    }


    return 0;

}


int str_del_space(u8* str)
{
    u8* str_c = str;
    int i, j = 0;
    for (i = 0;str[i] != '\0';i++)
    {
        if ((str[i] != ' ') && (str[i] != '\r') && (str[i] != '\n'))
            str_c[j++] = str[i];
    }
    str_c[j] = '\0';
    str = str_c;
    return 0;
}


int str2hex(u8* str, u8* out, u32* outlen)
{
    u8* p = str;
    u8 high = 0, low = 0;
    int tmplen = strlen(p), cnt = 0;
    tmplen = strlen(p);
    while (cnt < (tmplen / 2))
    {
        high = ((*p > '9') && ((*p <= 'F') || (*p <= 'f'))) ? *p - 48 - 7 : *p - 48;
        low = (*(++p) > '9' && ((*p <= 'F') || (*p <= 'f'))) ? *(p)-48 - 7 : *(p)-48;
        out[cnt] = ((high & 0x0f) << 4 | (low & 0x0f));
        p++;
        cnt++;
    }
    if (tmplen % 2 != 0)
        out[cnt] = ((*p > '9') && ((*p <= 'F') || (*p <= 'f'))) ? *p - 48 - 7 : *p - 48;

    if (outlen != NULL)
        *outlen = tmplen / 2 + tmplen % 2;

    return tmplen / 2 + tmplen % 2;
}


u8* data_pkt_receive_dispatch_1(u16* pkt_len)
{

    int tmp_len = 0;
    u8* eol = NULL; //END OF LINE "1111"
    u8* pkt_str = NULL;

    memset(pkt_hex, 0, BUF_LEN_2048);
    memset(read_line, 0, BUF_LEN_5120);

    if (fgets(read_line, BUF_LEN_5120, recv_file) != NULL)
    {
        tmp_len = strlen(read_line);

        if ((eol = strstr(read_line, "1111")) != NULL)
        {
            strcpy(eol, "\0");
            str_del_space(read_line);
            pkt_str = read_line + 24;
            str2hex(pkt_str, pkt_hex, &tmp_len);
            *pkt_len = tmp_len-4;
        }

        //报文不完整，指针回退
        else {
            fseek(recv_file, -tmp_len, SEEK_CUR);
            return NULL;
        }
    }
    //未读取到报文
    else
        return NULL;

    return pkt_hex;
}



int data_pkt_receive_destroy()
{
    if (recv_file != NULL)
    {
        fclose(recv_file);
    }

    if (pkt_hex != NULL)
    {
        free(pkt_hex);
        pkt_hex = NULL;
    }

    if (read_line != NULL)
    {
        free(read_line);
        read_line = NULL;
    }
    return 0;
}








